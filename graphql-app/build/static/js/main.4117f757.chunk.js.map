{"version":3,"sources":["SearchForm.js","query.js","list.js","App.js","reportWebVitals.js","index.js"],"names":["SearchForm","onSearch","f","useState","searchTerm","setSearchTerm","onSubmit","e","preventDefault","type","value","onChange","target","placeholder","required","findUserQuery","List","data","renderItem","renderEmpty","length","map","item","i","UserDetails","className","src","avatar_url","alt","login","style","width","name","location","App","setLogin","userData","setUserData","client","GraphQLClient","headers","Authorization","useEffect","request","then","user","catch","console","error","repositories","totalCount","nodes","repo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oLAmBe,SAASA,EAAT,GAA4C,IAAD,IAArBC,gBAAqB,MAAV,SAAAC,GAAC,OAAIA,GAAK,EACtD,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAOA,OACE,uBAAMC,SANO,SAAAC,GACbA,EAAEC,iBACFP,EAASG,IAIT,UACE,uBACEK,KAAK,OACLC,MAAON,EACPO,SAAU,SAAAJ,GAAC,OAAEF,EAAcE,EAAEK,OAAOF,QACpCG,YAAY,gBACZC,UAAQ,IAEV,+C,8BCpCKC,EAAc,mVCEZ,SAASC,EAAT,GAA+C,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,YAC9C,OAAQF,EAAKG,OAEH,6BAEIH,EAAKI,KAAI,SAACC,EAAMC,GAAP,OAAW,6BAAaL,EAAWI,IAAfC,QAJrBJ,ECoBxB,SAASK,EAAT,GAAgC,IAATP,EAAQ,EAARA,KAErB,OACE,sBAAKQ,UAAU,aAAf,UACE,qBAAKC,IAAKT,EAAKU,WAAYC,IAAKX,EAAKY,MAAOC,MAAO,CAAEC,MAAO,OAC5D,gCACE,6BAAKd,EAAKY,QACTZ,EAAKe,MAAQ,4BAAIf,EAAKe,OACtBf,EAAKgB,UAAY,4BAAIhB,EAAKgB,iBA6CpBC,MAnCf,WACE,MAAwB/B,mBAAS,eAAjC,mBAAO0B,EAAP,KAAcM,EAAd,KAEA,EAA8BhC,qBAA9B,mBAAOiC,EAAP,KAAiBC,EAAjB,KAEMC,EAAO,IAAIC,gBAAc,iCAC/B,CACEC,QAAQ,CACNC,cAAc,mDAYlB,OARAC,qBAAU,WACRJ,EACGK,QAAQ5B,EAAe,CAACc,UACxBe,MAAK,qBAAEC,QACPD,KAAKP,GACLS,MAAMC,QAAQC,SACjB,CAACV,EAAQvB,EAAec,IAEtBO,EAEF,qCACE,cAACpC,EAAD,CAAYC,SAAUkC,IACtB,cAACX,EAAD,eAAiBY,IACjB,8BAAIA,EAASa,aAAaC,WAA1B,cACA,cAAClC,EAAD,CACAC,KAAMmB,EAASa,aAAaE,MAC5BjC,WAAY,SAAAkC,GAAI,OAAI,+BAAOA,EAAKpB,aARf,6CCjDRqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.4117f757.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// export default function SearchForm({value, onSearch=f=>f}){\r\n//     const [searchTerm, setSearchTerm] = React.useState(\"\");\r\n//     const handleChange = event => {\r\n//       setSearchTerm(event.target.value);\r\n//     };\r\n//     return (\r\n//       <div className=\"App\">\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Search\"\r\n//           value={searchTerm}\r\n//           onChange={handleChange}\r\n//         />\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\nexport default function SearchForm({ onSearch = f => f }) {\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n    const submit = e => {\r\n      e.preventDefault();\r\n      onSearch(searchTerm);\r\n    };\r\n  \r\n    return (\r\n      <form onSubmit={submit}>\r\n        <input\r\n          type=\"text\"\r\n          value={searchTerm}\r\n          onChange={e=>setSearchTerm(e.target.value)}\r\n          placeholder=\"search github\"\r\n          required\r\n        />\r\n        <button>Search</button>\r\n      </form>\r\n    );\r\n  }\r\n  ","export const findUserQuery=`\r\n    query findRepos($login: String!) {\r\n        user(login: $login) {\r\n            login\r\n            name\r\n            location\r\n            avatar_url: avatarUrl\r\n            repositories(first: 100) {\r\n                totalCount\r\n                nodes {\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }`\r\n    ","import React from \"react\";\r\n\r\nexport default function List({data, renderItem, renderEmpty}){       \r\n  return !data.length ? renderEmpty :\r\n        (\r\n            <ul>\r\n           { \r\n                data.map((item, i)=><li key={i}>{renderItem(item)}</li>)\r\n            }\r\n            </ul>\r\n        );\r\n}","// import logo from './logo.svg';\n// import './App.css';\n\n\n// import { useState } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport Fetch from \"./Fetch\";\nimport UserRepositories from \"./UserRepositories\";\nimport SearchForm from \"./SearchForm\";\nimport RepositoryReadme from \"./RepositoryReadme\";\nimport {GraphQLClient} from \"graphql-request\";\nimport {findUserQuery} from \"./query\";\nimport List from \"./list\";\n\nfunction GitHubUsers({ login }) {\n  return (\n    <Fetch\n      uri={`https://api.github.com/users/${login}`}\n      renderSuccess={UserDetails}\n    />\n  );\n}\n\nfunction UserDetails({ data }) {\n  //console.log(`data inside userDetails ${data}`);\n  return (\n    <div className=\"githubUser\">\n      <img src={data.avatar_url} alt={data.login} style={{ width: 200 }} />\n      <div>\n        <h1>{data.login}</h1>\n        {data.name && <p>{data.name}</p>}\n        {data.location && <p>{data.location}</p>}\n      </div>\n      {/* <UserRepositories\n        login={data.login}\n        onSelect={(repoName) => console.log(`${repoName} selected`)}\n      /> */}\n    </div>\n  );\n}\n\nfunction App() {\n  const [login, setLogin]=useState(\"moonhighway\");\n  //const [repo, setRepo] = useState(\"learning-react\");\n  const [userData, setUserData]=useState();\n\n  const client=new GraphQLClient(\"https://api.github.com/graphql\",\n  {\n    headers:{\n      Authorization: `Bear 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`\n    }\n  });\n\n  useEffect(()=>{\n    client\n      .request(findUserQuery, {login})\n      .then(({user})=>user)\n      .then(setUserData)\n      .catch(console.error);\n  },[client, findUserQuery, login]);\n\n  if(!userData) return <p>loading....</p>\n  return (\n    <>\n      <SearchForm onSearch={setLogin} />\n      <UserDetails {...userData} />\n      <p>{userData.repositories.totalCount} - repos</p>\n      <List\n      data={userData.repositories.nodes}\n      renderItem={repo => <span>{repo.name}</span>}\n      />\n    </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}